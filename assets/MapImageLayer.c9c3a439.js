import{iA as S,jg as w,iB as I,eG as O,eH as $,eI as E,eJ as M,iC as T,iM as j,jd as N,a1 as L,a as P,aR as R,jN as v,en as g,U as f,d7 as J,ed as U,iN as F,ju as q,g as b,p as A,a3 as i,a4 as n,dh as k,ef as _,eM as z,a5 as B,cU as V,h5 as C}from"./vendor.2b982caa.js";import{i as G}from"./scaleUtils.e821ae7a.js";import{E as H,y as D,z as K}from"./SublayersOwner.ef649d80.js";import{c as W}from"./ExportImageParameters.f14aefc5.js";import{n as x}from"./sublayerUtils.500be2d1.js";import"./Version.01b4be31.js";import"./floorFilterUtils.05eb8c6a.js";let s=class extends S(w(I(H(D(O($(E(M(T(j(N(L(V))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,t){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const a=v(t.origin);if(a===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;l=x(o,m,g.SERVICE)}else if(a>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");l=x(o,m.sublayers,v(m.origin))}}const c=[],y={writeSublayerStructure:l,...t};let h=l;o.forEach(a=>{const m=a.write({},y);c.push(m),h=h||a.originOf("visible")==="user"}),c.some(a=>Object.keys(a).length>1)&&(r.layers=c),h&&(r.visibleLayers=o.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,r,p,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new W({layer:this,floors:t==null?void 0:t.floors,scale:G({extent:e,width:r})*o}),c=l.toJSON();l.destroy();const y=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},h=e&&e.spatialReference,a=h.wkid||JSON.stringify(h.toJSON());c.dpi*=o;const m={};if(t!=null&&t.timeExtent){const{start:u,end:d}=t.timeExtent.toJSON();m.time=u&&d&&u===d?""+u:`${u!=null?u:"null"},${d!=null?d:"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(m.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:r+","+p,...c,...y,...m}}async fetchImage(e,r,p,t){return this._fetchImage("image",e,r,p,t)}async fetchImageBitmap(e,r,p,t){const o=await this._fetchImage("blob",e,r,p,t);return createImageBitmap(o)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:t,fullExtent:o,timeExtent:l}=p,c=t||o;return{fullExtent:c&&J.fromJSON(c),timeExtent:l&&U.fromJSON({start:l[0],end:l[1]})}}loadAll(){return F(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return q(this,e)}async _fetchImage(e,r,p,t,o){var y;const l={responseType:e,signal:(y=o==null?void 0:o.signal)!=null?y:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},c=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:h}=await f(c,l);return h}catch(h){throw A(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${c}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};i([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([n()],s.prototype,"dpi",void 0),i([n()],s.prototype,"gdbVersion",void 0),i([n()],s.prototype,"imageFormat",void 0),i([k("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([n()],s.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([n()],s.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([_("sublayers",{layers:{type:[K]},visibleLayers:{type:[C]}})],s.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([n(z)],s.prototype,"url",void 0),s=i([B("esri.layers.MapImageLayer")],s);const se=s;export{se as default};
